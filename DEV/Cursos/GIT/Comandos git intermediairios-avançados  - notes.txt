BRANCH 		=  	Ramificação do projeto, que permite que funcionalidades sejam desenvolvidas separadamente sem impactar as funcionalidades estáveis do projeto (master)
			ATENÇÃO: Nomes de "branch" não podem ter espaço, procure separar por espaço ou underline
MERGE  		=  	O conceito de MERGE "une" o código de duas branchs diferentes.
CONFLICT	=	Quando a mesma alteração foi feita na mesma "linha" em branches distintas. Na hora de fazer o "merge" um conflito será identificado e o desenvolvedor deverá escolher qual alteração vai ser aplicada

---------------------------------
Comandos para controle de BRANCH
---------------------------------

* CONSULTAR *
--------------	
	git branch    			= Exibe uma lista de branch que temos em nosso repositório local
	
* CRIAR *
----------
> LOCAL
	git branch NOME_DA_BRANCH 	= Comando para CRIAR uma nova branch
	git checkout NOME_DA_BRANCH 	= Comando para ACESSAR a branch citada
	git checkout -b NOME_DA_BRANCH  = Comando para CRIAR e ACESSAR a branch de uma unica vez
	git switch -c NOME_DA_BRANCH	= Comando para CRIAR uma nova branch
	git switch NOME_DA_BRANCH	= Comando para ACESSAR a branch citada
	git switch -			= Comando para voltar para a branch que estava sendo utilizada anteriormente

> SERVIDOR|REMOTA
	git push --set-upstream origin NOME_DA_BRANCH_A_CRIAR	 = Nesse caso a branch DEVELOP será enviada para o repositório WEB a partir da branch ORIGIN (quando a branch ainda não existe no servidor)
	git push -u origin NOME_DA_BRANCH_A_CRIAR 	 	 = mesmo comando acima escrita de outra forma
	git push						 = Quando a branch já existe no servidor e você deseja apenas atualizar as informações.
	git pull 	 					 = Nessa caso, a branch local está buscando e baixando as alterações da brach que estão na WEB para o local

* REMOVER *
------------
> LOCAL
	git branch -d NOME_DA_BRANCH   = Comando para REMOVER uma branch local
	git branch -D NOME_DA_BRANCH   = Comand para FORÇAR a remoção de uma branch local

> SERVIDOR|REMOTA	
	git push --delete origin NOME_DA_BRANCH  = A branch é apagada direto no repositório WEB


* RENOMEAR *
------------
	git branch -m NOVO_NOME 	   = Caso já esteja "logado na branch" que deseja renomear
	git branch -m NOME_ATUAL NOME_NOVO = Caso não esteja na branch que deseja renomear

---------------------------------
Comandos para MERGE entre BRANCHS
---------------------------------
	Uma branch sempre se origina de outra principal.
	Faça o checkout na branch que deseja atualizar (git checkout NOME_BRANCH)
	
	git merge develop         =          Ao executar o comando, você está pegando as alterações da branch DEVELOP para a branch MASTER (que deseja atualizar)

-----------------------------------------------------------------
Comandos para utilizar ferramenta grafica para RESOLVER CONFLITOS
------------------------------------------------------------------
	>> Baixar o programa KDIFF3

	>> Configurar o programa instalado no GIT
		git config --global --add merge.tool kdiff3  	= Configurar no git para  que a ferramenta grafica utilizada no GIT seja KDIFF3
		git config --global --add mergetool.kdiff3.path "Colocar o caminho de instalação do KDIFF3"
		git config --global --add mergetool.kdiff3.trustExitCode false

	>> Executando
		git mergetool  = Para executar a ferramenta gráfica
	
	ATENÇÃO: Geralmente, plataformas de desenvolvimento (IDE) já possuem ferramentas internas que auxiliam os desenvolvedores a resolverem os conflitos 

-------------------------------
Salvando as mudanças na memória
-------------------------------
	git stash    		= 	Comando pega as alterações realizadas na branch que ainda não foram comitadas e SALVA NA MEMÓRIA. Dessa forma caso queira mudar de branch durante o desenvolvimento as alterações não serão "carregadas para outra branch"
	git stash list		= 	Lista todas as alterações salvas em memória	
	
	git stash apply		=	Pega a ultima alteração salva na memória e a carrega para branch atual
	git stash pop		= 	Pega a ultima alteração salva na memória, a carrega para branch atual e a remove da listagem
	git stash pop ID_STASH	=	Pega um STASH específico que está salvo na memória, o carrega para branch atual e a remove da listagem

	git stash drop ID_STASH = 	Serve para apagar uma STASH especifica da listagem
	git reset --hard	= 	Desfaz as alterações feitas

----------
GIT FETCH
----------
	O comando tem a responsabilidade de trazer alterações do servidor WEB para o repositório LOCAL.
	Atenção: Ao fazer um PULL, automaticamente um FETCH é executado em conjunto com um MERGE, o que faz a alteração ser aplicada na branch local.
	Ao executar um GIT FETCH caso os dados estejam corretos para aplicar de fato na branch local depois será necessário executar GIT MERGE.

-----------
GIT REBASE
-----------
	O comando permite alterar uma variedade de commits, modificando o histórico do repositório. 
	É possível reordenar, editar ou combinar commits. (Utilizado para ter um histórico mais LINEAR no projeto)
	(Pegar os commits de uma branch e aplicar de uma vez só em outra)
		git rebase NOME_DA_BRANCH	=	Vai trazer para a branch atual, todas as alterações que estão em NOME_DA_BRANCH
	
------
ALIAS
------
	Comando utilizado para criar "atalhos" para respectivos comandos. Exemplo:
	git config --global alias.s status       =    Nesse caso não será mais necessário digitar GIT STATUS apenas GIT S 
	git config --global --unset alias.s  	 =    Comando para remover o "atalho" criado anteriormente para letra "S"

------
TAGS
------
	Geralmente utilizada para marcar "versões" que foram lançadas, podemos considera-la como um "ponteiro"
	Cada tag sempre está associada a um "commit" especifico, e seu respectivo nome é unico
		git tag	V1				= 	Vai criar a tag V1 exatamente no local que estou no git (no ultimo commit da branch)
		git tag -a -m "mensagem da tag"	V2	= 	Tag mais completa (que permite uma anotação e mostra quem vez)

	Nesse caso, a tag V0 foi criada em um commit especifico e não no ultimo como nos exemplos anteriores.
		git tag V0 NUMERO_DO_COMMIT	ou	git tag -a -m "mensagem da tag" V0 NUMERO_DO_COMMIT

	Listando TAGS
		git tag
		git tag -l
		git tag --list
		git tag -n

	Enviando TAG LOCAL para o servidor
		git push origin NOME_DA_TAG	= 	Enviará uma TAG especifica para o servidor
		git push --tags			=	Enviará TODAS as TAGS que existem localmente para o servidor 	

	Utilizando uma TAG
		git checkout NOME_DA_TAG	= 	Como ela é apenas um ponteiro de um commit, conseguimos acessar o momento exato do codigo presente do respectivo comitt em que a TAG foi criada

	Removendo TAGS
		git tag -d NOME_DA_TAG			= 	Para apagar a tag localmente
		git push --delete origin NOME_DA_TAG	=	Para apagar a tag do servidor

----------
GIT CLONE
----------
A função de CLONE de um projeto faz uma cópia completa de todo projeto que está em um SERVIDOR para seu AMBIENTE LOCAL, inclusive o histórico de alterações
	Selecione o caminho de pasta desejado para fazer o CLONE DO PROJETO LOCAL
		git clone  nomedoprojeto/ nome_da_pasta_para_onde_quer_clonar    exemplo:     git clone gitcourse/ testegit

	Selecione o caminho de destino para fazer o CLONE DO PROJETO QUE ESTÁ NO REPOSITORIO SERVIDOR GIT
		git clone  colocar_o_nome_da_url_online

-----------
GIT REMOTE
-----------
	Comando serve para associar uma determinada pasta a um repositorio REMOTO|SERVIDOR
	Para isso, navegue por comando até a pasta local que deseja associar e execute
		git init
		git remote add origin CAMINHO_DO_REPOSITORIO_DO_GIT
		git remote -v
	Se o vinculo foi feito corretamente, o caminho de FETCH e PUSH será exibido

	Caso o o nome do repositorio tenha sido alterado no servidor, nos também precisamos mudar a associação local seguindo:
		git remote set-url origin NOVO_CAMINHO_DO_REPOSITORIO_DO_GIT

------------
CHERRY PICK
------------
	Quando vc só deseja um "pedaço" de código, apenas um commit que está em outra branch utilizamos o comando CHERRY PICK
		git cherry-pick NOME_DO_COMMIT

------------
GIT BISECT
------------
	Por meio de uma busca binária (sempre selecionando o meio do "conjunto"), o comando ajuda a encontrar "O COMMIT QUE CAUSOU" um determinado erro no codigo
		git bisect start			=	Para começar a busca
		git bisect good NOME_DO_COMMIT		=	Informe qual é o commit que você sabe que o codigo funcionava
		git bisect bad NOME_DO_COMMIT		=	Informe qual é o commit que você está vendo que o codigo está com erro
	Automaticamente a pesquisa vai começar a selecionar commits, que podem ou não ter problema. O desenvolvedor deve informar se o que ele selecionou é bom ou ruim por meio dos comandos:
		git bisect good   OR   git bisect bad
	Aguarde até que o BISECT execute todas as interações possiveis e mostre examente qual é o commit que causou o problema
	Digite o comando a seguir para encerrar a busca
		git bisect reset

COMANDO PARA CONTAR QUANTAS LINHAS DE CODIGO EXISTEM (APROXIMADAMENTE)
	git grep -v "^[ \t]*$" |wc -l
