Comandos básicos GIT/CMD
--------------------------
	cd      		= 	comando para entrar na pasta
	dir    			= 	lista os aquivos presentes no diretório
	dir -a  		= 	lista os arquivos OCULTOS presentes no diretório
	clear   		= 	limpa as informações escritas na tela do terminal
	git remote -v      	= 	serve para listar a URL em que o repositório está utilizando
	git branch | grep R1	= 	o comando GREP server como um filtro. No caso desse comando ele está pedindo para listar somente as branch que contem a informção "R1". Dei o exemplo com BRANCH para pode ser usado para outras informações como por exemplo TAGS,

Configurando NOME E EMAIL
---------------------------
	git config --global user.name "Bruna Carareto"
	git config --global user.email "bruna.carareto@wexinc.com"

Para visualizar todas as configurações do git
-----------------------------------------------
	git config --list

Acesse o caminho do projeto para CRIAR NOVO REPOSITORIO
----------------------------------------------------------
	git init 

Definições dos status
----------------------
	UNMODIFIED	=	Arquivo sem alteração
	MODIFIED	=	Arquivos com alteração
	NOT STAGED	= 	Existe alteração porém ela não foi preparada para o commit (não foi enviado para "área de preparação") --> Comando (git add) é necessário
	STAGED		=	Quando o usuário já executou o comando de (git add) para preparar o arquivo para o commit
	UNTRACKED	=	Quando outro arquivo foi criado depois dos demais já estiverem em "STAGED"	

Selecionando quais arquivos deseja fazer "o controle de versões"
----------------------------------------------------------------
	git status                                                = vai exibir quais arquivos estão ou não rastreáveis o status de cada um
	git add nomedoarquivo.txt                                 = o arquivo selecionado passa a ser rastreado
	git add --all    OU     git add -A    OU    git add .     = vai colocar todos os arquivos presentes na pasta para o rastreamento

Removendo arquivos do "controle de versão"
---------------------------------------------
	git rm --cached nomedoarquivo.txt 			  = remove um arquivo especifico que foi adicionado
	git rm --cached -r .					  = remove todos os arquivos adicionados

Fazendo commit
---------------
	git commit -m "mensagme a ser exibida para o respectivo commit"    =  vai salvar localmente uma nova versão do aquivo no GIT.
	git commit                                                         =  mesma função acima porém sem mensagem definida

Alterando ultimo commit realizado
----------------------------------
	git commit --amend -m "novo nome do commit"		  = nesse caso apenas alterou o nome do ultimo commit anterior
	* não indicado para quando existe mais de um usuário trabalhando no repositório, pois, o comitt será "removido" e inserido novamente em outro código *

Revertendo commit
-----------------
	git revert NOME_DO_COMMIT		= O commit anterior não é apagado e sim um novo commit sem "aquelas alterações" é criado (mantemos o histórico)
	git revert NOME_DO_COMMIT --no-edit	= comando para reverter o que acabou de ser revertido

Desfazendo commit
------------------
	git reset --hard HEAD~1		=	O comando pega a branch principal e voltando "1" commit. (COMMIT É APAGADO, NÃO EXISTE HISTÓRICO)
						A quantidade pode variar de acordo com a quantidade de comites citadas no parâmetro do comando (comando funciona apenas para ALTERAÇÃO LOCAL)
			
Verificando diferença entre o codigo
------------------------------------
	git diff                                   = Para ver a diferença entre os aquivos alterados antes de estarem "rastreados"
	git diff --cached  OU   git diff --staged  = Para ver a diferença dos arquivos já rastreados


Para visualizar o historico de alterações
-------------------------------------------
Observação: Existem vários comandos para ver log de alterações (arquivo separado adicionado na pasta do curso). 
Os mais usados são:
	git log              = mostra as modificações detalhadas (ID SHA, nome autor, data, descriação do commit)
	git log --oneline    =  mostra as modificações resumidamente (em apenas uma linha)
	

ATENÇÃO
--------
	Arquivos com extenção .GITIGNORE são arquivos que o usuário não deseja fazer o versionamento.
O ideal é ter apenas um aquivo .GITIGNORE dentro da pasta do produto e dentro desse arquivo, parametrizar (colocar o nome ou extensões) de todos os aquivos que você NÃO DESEJA VERSIONAR.
	Existe um repositorio que contem vários aquivos de .Gitignore de linguagens diferentes (https://github.com/github/gitignore)

	Ao instalar o GIT, o editor de texto padrão da ferramenta (VIM) estará disponivel
	Caso o usuário não queira utilizar o VIM, outros editores instalados na máquina podem ser usados seguindo esses comandos
	https://docs.github.com/en/get-started/getting-started-with-git/associating-text-editors-with-git	

